

pattern = { SOI ~ disjunction ~ EOI }

disjunction = { alternative ~ ("|" ~ alternative)* }

alternative = { term* }

term = { assertion | atom_quantifier | atom }

assertion = { 
    assertion_beginning | 
    assertion_end | 
    assertion_word_boundary | 
    assertion_not_word_boundary | 
    lookahead | 
    negative_lookahead | 
    lookbehind | 
    negative_lookbehind
}

assertion_beginning = {
    "^"
}
assertion_end = {
    "$"
}

assertion_word_boundary = {
    "\\b"
}
assertion_not_word_boundary = {
    "\\B"
}

lookahead = {
    "(?=" ~ disjunction ~ ")"
}

negative_lookahead = {
    "(?!" ~ disjunction ~ ")"
}

lookbehind = {
    "(?<=" ~ disjunction ~ ")"
}

negative_lookbehind = {
    "(?<!" ~ disjunction ~ ")"
}

atom_quantifier = { atom ~ quantifier }

quantifier = {
    "*" ~ "?"? |
    "+" ~ "?"? |
    "?" ~ "?"? |
    quantifier_fixed_repeat |
    quantifier_repeat_atleast |
    quantifier_repeat_in_range
}

quantifier_fixed_repeat = {
    "{" ~ decimal_digits ~ "}" ~ "?"?
}

quantifier_repeat_atleast = {
    "{" ~ decimal_digits ~ "," ~ "}" ~ "?"?
}

quantifier_repeat_in_range = {
    "{" ~ decimal_digits ~ "," ~ decimal_digits ~ "}" ~ "?"?
}

atom = {
    !(
        "^" |
        "$" |
        "\\" |
        "." |
        "*" |
        "+" |
        "?" |
        "(" |
        ")" |
        "[" |
        "]" |
        "{" |
        "}" |
        "|"
    ) ~ ANY |
    "." |
    "\\" ~ atom_escape |
    character_class |
    capture_group |
    non_capturing_group
}

back_reference_index = {
    ('1'..'9') ~ ('0'..'9')*
}

capture_group = {
    "(" ~ ("?" ~ group_name)? ~ disjunction ~ ")"
}

non_capturing_group = {
    "(?:" ~ disjunction ~ ")" 
}

atom_escape = {
    back_reference_index |
    "k" ~ group_name |
    class_escape |
    character_escape |
    ANY
}

hex_escape = {
    (ASCII_HEX_DIGIT) ~ (ASCII_HEX_DIGIT)
}

character_class = {
    "[" ~ negative_character_class? ~ class_range* ~ "]"
}

negative_character_class = {
    "^"
}

class_range = {
    "\\" ~ class_escape |
    class_atom ~ "-" ~ class_atom |
    class_atom |
    "-"
}

class_atom = {
    "\\-" |
    "\\b" |
    "\\" ~ character_escape |
    !( "\\" | "]" | "-" ) ~ ANY
}

class_escape = {
    "d" |
    "D" |
    "s" |
    "S" |
    "w" |
    "W" |
    "p{" ~ unicode_property ~ "}" |
    "P{" ~ unicode_property ~ "}"
}

character_escape = {
    "f" |
    "n" |
    "r" |
    "t" |
    "v" |
    "c" ~ ('A'..'Z' | 'a'..'z') |
    "0" ~ !decimal_digits |
    "x" ~ hex_escape |
    unicode_surrogate_pair |
    "u" ~ unicode_code_unit |
    "u{" ~ unicode_code_point ~ "}" |
    ANY
}

unicode_surrogate_pair = {
    "u" ~ unicode_lead_surrogate ~ "\\u" ~ unicode_trail_surrogate
}

unicode_lead_surrogate = {
    "D" ~ ("8" | "9" | "A" | "B" | "a" | "b") ~ (ASCII_HEX_DIGIT) ~ (ASCII_HEX_DIGIT)
}

unicode_trail_surrogate = {
    "D" ~ ('C'..'F') ~ (ASCII_HEX_DIGIT) ~ (ASCII_HEX_DIGIT)
}

unicode_code_unit = {
    (ASCII_HEX_DIGIT){4}
}

unicode_code_point = {
    (ASCII_HEX_DIGIT)+
}

group_name = {
    "<" ~ 
    (ID_START | "$" | "_" | "\\u" ~ (ASCII_HEX_DIGIT){4} | "\\u{" ~ ASCII_HEX_DIGIT+ ~ "}") ~ 
    (ID_CONTINUE | "$" | "\u{200D}" | "\u{200C}" | "\\u" ~ (ASCII_HEX_DIGIT){4} | "\\u{" ~ ASCII_HEX_DIGIT+ ~ "}")* 
    ~ ">"
}

unicode_property = {
    unicode_property_name ~ "=" ~ unicode_property_value |
    unicode_property_value
}

unicode_property_name = {
    (ASCII_ALPHA | "_") +
}

unicode_property_value = {
    (ASCII_ALPHANUMERIC | "_") +
}

decimal_digits = { ('0'..'9')+ }